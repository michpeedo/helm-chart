# Default values for bdba.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

frontend:
  serviceAccount:
    create: true
    name: ""
  createSecrets: true
  repository: docker.io/sigsynopsys/bdba-frontend
  tag: "2024.6.0"
  pullPolicy: IfNotPresent
  database:
    {}
    #  postgresqlHost: external-db.local
    #  postgresqlPort: 5432
    #  postgresqlUsername: "dbuser"
    #  postgresqlPassword: "dbpassword"
    #  postgresqlDatabase: "bdba-external"
    #  postgresqlSslMode: "require"
    #  clientSecretName: "bdba-pgclient"
    #  rootCASecretName: "bdba-pgroot
  web:
    sessionCookieAge: "1209600"
    hideLicenses: false
    replicas: 1
    admin: "admin@bdba.local"
    # rootURL: "http://bdba.local"
    vacuumDays: "sunday"
    # csrfTrustedOrigins: "https://...,https://"
    forcedHttpsUrls: false
  email:
    enabled: false
    from: "noreply@bdba.local"
    #  smtpHost: "mail.example.local"
    #  smtpPort: "25"
    #  smtpUser: bdbauser
    #  smtpPassword: secretpassword
    #  security: "none"
    #  verify: "false"
  ldap:
    enabled: false
    #  serverUri: 'ldap(s)://your-ldap-server'
    #  userDNTemplate: "uid=%(user)s,ou=Staff,dc=bdba,dc=test"
    #  bindAsAuthenticating: "true"
    #  bindDN: "cn=APPLICATION_USER,ou=Users,ou=Company,dc=example,dc=com"
    #  bindPassword: "bind_user_password"
    #  startTLS: "true"
    #  verify: "true"
    #  rootCASecret: "ldap-root"
    #  requireGroup: cn=USER_GROUP,ou=Groups,ou=Company,dc=example,dc=com"
    #  userSearch: "ou=Users,ou=Company,dc=example,dc=com"
    #  userSearchScope: "(cn=%(user)s)"
    #  groupSearch: "ou=Groups,dc=example,dc=com"
    #  groupSearchScope: "(objectClass=groupOfNames)"
    #  nestedSearch: "true"
    #  searchOptReferrals: "true"
    #  userEmailMatch: "false"
  licensing:
    username: ""
    password: ""
    upstream: "https://protecode-sc.com/"
  applicationLogging:
    enabled: true
  resources:
    requests:
      memory: "1Gi"
      cpu: 250m
    limits:
      memory: "4Gi"
      cpu: 4
  internalBucket: "bdba-internal"
  uploadBucket: "bdba-uploads"
  securityContext:
    enabled: true
  extraEnv: []
#    - name: "EXTRA_VARIABLE"
#      value: "FOO"
  # disableEc2Metadata: true

# rootCASecret:

beat:
  resources:
    requests:
      memory: "128Mi"
      cpu: "50m"
    limits:
      memory: "256Mi"
      cpu: 2

updater:
  resources:
    requests:
      memory: "1Gi"
      cpu: 250m
    limits:
      memory: "4Gi"
      cpu: 2

worker:
  replicas: 1
  concurrency: 1
  repository: docker.io/sigsynopsys/bdba-worker
  tag: "2024.6.0"
  pullPolicy: IfNotPresent
  applicationLogging:
    enabled: true
  scanSpecificLogging:
    enabled: true
  memoryPerScanner: 4  # Gigabytes, must be integer
  storagePerScanner: 30  # Gigabytes, must be integer
  storageClass: ""
  securityContext:
    enabled: true
  terminationGracePeriodSeconds: 21600
  keda:
    enabled: false
    minReplicaCount: 1
    maxReplicaCount: 10
    queueLength: 2
  extraEnv: []
#  resources:
#    requests:
#      memory: "4Gi"
#      cpu: "1"
#      ephemeral-storage: "30Gi"
#    limits:
#      memory: "8Gi"
#      cpu: "2"
#      ephemeral-storage: "30Gi"
  
fluentd:
  repository: docker.io/sigsynopsys/bdba-fluentd
  tag: "2024.6.0"
  pullPolicy: IfNotPresent
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "1Gi"
      cpu: 1
  logsBucket: bdba-logs
  securityContext:
    enabled: true

taskslong:
  resources:
    requests:
      memory: "1Gi"
      cpu: "250m"
    limits:
      memory: "4Gi"
      cpu: 1

tasks:
  replicas: 1
  concurrency: 3
  resources:
    requests:
      memory: "1Gi"
      cpu: "250m"
    limits:
      memory: "4Gi"
      cpu: 3

fluentbit:
  repository: fluent/fluent-bit
  tag: 2.1
  pullPolicy: IfNotPresent

global:
  postgresql:
    existingSecret: ""

pgupgrader:
  enabled: true
  image:
    repository: "docker.io/sigsynopsys/bdba-pgupgrader"
    tag: "2024.6.0"

postgresql:
  image: 
    repository: "bitnami/postgresql"
    tag: "15.7.0-debian-12-r9"
  enabled: true
  postgresqlUsername: bdba
  postgresqlPassword: CHANGEME
  postgresqlDatabase: bdba
  terminationGracePeriodSeconds: 120
  persistence:
    size: 300Gi
  resources:
    requests:
      cpu: "250m"
      memory: "1Gi"
    # limits:
      # cpu:
      # memory
  securityContext:
    enabled: true
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

memcached:
  enabled: true
  image:
    repository: memcached
    tag: 1.6.28-bookworm
  replicaCount: 1
  pdbMinAvailable: 1
  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
    limits:
      cpu: 1
      memory: "1Gi"
  securityContext:
    enabled: true

minio:
  enabled: true
  image:
    repository: minio/minio
    tag: RELEASE.2021-04-22T15-44-28Z
    pullPolicy: IfNotPresent
  service:
    port: 9000
  mode: standalone
  persistence:
    enabled: true
    size: 300Gi
  securityContext:
    enabled: true
  existingSecret: bdba-minio-secret
  securityContext:
    enabled: true
  resources:
    requests:
      cpu: "250m"
      memory: "256Mi"
#    limits:
#      cpu:
#      memory:

rabbitmq:
  image:
    tag: 3.10.25-debian-12-r20
  enabled: true
  rabbitmq:
    username: bdba
    existingPasswordSecret: bdba-rabbitmq-password-secret
    ## Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ## hard-coded to prevent restarts of rabbitmq (not used for security reasons)
    existingErlangSecret: bdba-rabbitmq-erlang-cookie-secret
    configuration: |-
      ## Clustering
      #      cluster_formation.peer_discovery_backend = rabbit_peer_discovery_k8s
      #      cluster_formation.k8s.host = kubernetes.default.svc.{{.Values.rabbitmq.rabbitmq.clustering.k8s_domain}}
      #      cluster_formation.node_cleanup.interval = 10
      #      cluster_formation.node_cleanup.only_log_warning = true
      #      cluster_partition_handling = autoheal
      # queue master locator
      queue_master_locator=min-masters
      # enable guest user
      loopback_users.guest = false
      consumer_timeout = 86400000
    plugins: rabbitmq_management
  persistence:
    size: 8Gi
  resources:
    requests:
      memory: "1Gi"
      cpu: 100m
#   limits:
#      memory: "1Gi"
#      cpu: 100m

  securityContext:
    enabled: true

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: true
  class: nginx
  annotations:
    route.openshift.io/termination: "edge"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  apiConnLimit: 8
  host: "bdba.local"

  tls:
    enabled: false
    secretName: bdba-tls

httpProxy: ""
httpNoProxy: ""
logRetention: 30  # Days to keep application logs

s3Endpoint: ""
s3AccessKeyId: ""
s3SecretAccessKey: ""
s3Region: ""

# External rabbitmq url (amqp://<user>:<password>@<host>:<port>/<vhost>)
brokerUrl: ""
brokerTls: false
brokerClientSecretName: "" # tls secret for rabbitmq client certificate
brokerRootCASecretName: "" # tls secret for rabbitmq root certificate  

# External memcached
memcachedHostPort: ""
memcachedTls: false
memcachedTlsClientSecretName: ""
memcachedRootCASecretName: ""

resources: {}

nodeSelector: {}

tolerations: []

affinity: {}
